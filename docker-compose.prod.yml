version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: terranovision-db-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-terranovision}
      POSTGRES_USER: ${POSTGRES_USER:-terranovision}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-terranovision}']
      interval: 30s
      timeout: 10s
      retries: 5

  ingest:
    build:
      context: .
      dockerfile: services/ingest/Dockerfile
      target: production
    container_name: terranovision-ingest-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      M3U_ENDPOINT: ${M3U_ENDPOINT}
      PORT_INGEST: 4000
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4000/health']
      interval: 30s
      timeout: 10s
      retries: 3

  stream-gateway:
    build:
      context: .
      dockerfile: services/stream-gateway/Dockerfile
      target: production
    container_name: terranovision-gateway-prod
    environment:
      PORT_GATEWAY: 4001
      NODE_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-info}
      FFMPEG_PATH: /usr/bin/ffmpeg
      HLS_SEGMENT_DURATION: ${HLS_SEGMENT_DURATION:-4}
      HLS_PLAYLIST_SIZE: ${HLS_PLAYLIST_SIZE:-5}
      MAX_CONCURRENT_TRANSCODES: ${MAX_CONCURRENT_TRANSCODES:-10}
      CDN_BASE_URL: ${CDN_BASE_URL}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-60000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
    volumes:
      - hls_data:/app/hls
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:4001/health']
      interval: 30s
      timeout: 10s
      retries: 3

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
      target: production
    container_name: terranovision-web-prod
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      INGEST_SERVICE_URL: http://ingest:4000
      STREAM_GATEWAY_URL: http://stream-gateway:4001
      NODE_ENV: production
    depends_on:
      - postgres
      - ingest
      - stream-gateway
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/']
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: terranovision-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - hls_data:/var/www/hls:ro
    depends_on:
      - web
      - ingest
      - stream-gateway
    restart: unless-stopped

volumes:
  postgres_data:
  hls_data:
