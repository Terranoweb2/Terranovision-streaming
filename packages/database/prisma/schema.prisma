// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profiles
model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  phoneNumber   String?   @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  profiles      Profile[]
  favorites     Favorite[]

  @@index([email])
  @@index([phoneNumber])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Profile model for multi-profile support and parental controls
model Profile {
  id             String   @id @default(cuid())
  userId         String
  name           String
  avatar         String?
  isChild        Boolean  @default(false)
  pin            String?
  ageRestriction Int      @default(18) // Maximum age rating allowed
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewHistory ViewHistory[]

  @@index([userId])
}

// Channel categories
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  order       Int       @default(0)
  ageRating   Int       @default(0) // 0=All, 13, 16, 18+
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  channels Channel[]

  @@index([slug])
  @@index([ageRating])
}

// Channel model
model Channel {
  id          String   @id @default(cuid())
  externalId  String?  @unique // ID from M3U if present
  name        String
  slug        String   @unique
  description String?
  logo        String?
  streamUrl   String
  streamType  String   @default("hls") // hls, rtmp, rtsp
  groupName   String? // Original group from M3U
  categoryId  String?
  tvgId       String? // For EPG matching
  tvgName     String?
  language    String   @default("fr")
  country     String?
  isActive    Boolean  @default(true)
  ageRating   Int      @default(0)
  quality     String?  // SD, HD, FHD, 4K
  bitrate     Int? // In kbps
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category     Category?      @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  favorites    Favorite[]
  viewHistory  ViewHistory[]
  epgPrograms  EpgProgram[]

  @@index([slug])
  @@index([categoryId])
  @@index([groupName])
  @@index([tvgId])
  @@index([isActive])
  @@index([ageRating])
}

// Favorites
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@unique([userId, channelId])
  @@index([userId])
  @@index([channelId])
}

// View history
model ViewHistory {
  id         String   @id @default(cuid())
  profileId  String
  channelId  String
  startedAt  DateTime @default(now())
  endedAt    DateTime?
  duration   Int? // In seconds
  percentage Int? // Percentage watched

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([channelId])
  @@index([startedAt])
}

// EPG (Electronic Program Guide)
model EpgProgram {
  id          String   @id @default(cuid())
  channelId   String
  title       String
  description String?  @db.Text
  startTime   DateTime
  endTime     DateTime
  category    String?
  icon        String?
  season      Int?
  episode     Int?
  rating      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([startTime])
  @@index([endTime])
  @@index([channelId, startTime, endTime])
}

// System settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
}
